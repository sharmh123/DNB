Higher order functions take other functions as parameters or return a function as a result
This is possible because functions are first-class values in Scala
The terminology can get a bit confusing at this point, and we use the phrase “higher order function” for both methods and functions that take functions as parameters or that return a function.
One of the most common examples is the higher-order function map which is available for collections in Scala.
doubleSalary is a function which takes a single Int, x, and returns x * 2
In general, the tuple on the left of the arrow => is a parameter list and the value of the expression on the right is what gets returned
On line 3, the function doubleSalary gets applied to each element in the list of salaries.
To shrink the code, we could make the function anonymous and pass it directly as an argument to map:
Notice how x is not declared as an Int in the above example
That’s because the compiler can infer the type based on the type of function map expects
